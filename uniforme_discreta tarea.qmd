---
title: "Distribución Uniforme Discreta"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(kableExtra)
library(gridExtra)
```

<br>

La **distribución uniforme discreta** es una de las distribuciones de probabilidad más elementales. Se caracteriza porque todos los valores posibles de la variable aleatoria tienen la misma probabilidad de ocurrir.

::: {#def-vaunif}
Una variable aleatoria discreta $X$ sigue una distribución uniforme discreta en el conjunto de $n$ números $\{x_1, x_2, \ldots, x_n\}$ si:

\begin{equation}
f(x) =  \begin{cases} 
\frac{1}{n} & \text{si } x \in \{x_1, x_2, \ldots, x_n\} \\
0 & \text{en otro caso}
\end{cases}
\end{equation}

Para denotar que una variable aleatoria $X$ tiene distribución uniforme escribimos:

\begin{equation}
X \sim \text{unif} \{x_1, x_2, \ldots, x_n\}
\end{equation}
:::

## Características Principales

**Función de Probabilidad**

\begin{equation}
f(x) = P(X = x) = \begin{cases} 
\frac{1}{n} & \text{si } x \in \{x_1, x_2, \ldots, x_n\} \\
0 & \text{en otro caso}
\end{cases}
\end{equation}

**Función de Distribución (Probabilidad Acumulada)**

Suponiendo que los valores $x_1, x_2, \ldots, x_n$ son $n$ enteros consecutivos, tenemos:

\begin{equation}
F(x) = P(X \leq x) = \begin{cases}
0 & \text{si } x < x_1 \\
\frac{\lfloor x \rfloor - x_1 + 1}{x_n-x_1+1} & \text{si } x_1 \leq x \leq x_n \\
1 & \text{si } x > x_n
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media):

\begin{equation}
E(X) = \frac{1}{n}\sum_{i=1}^n x_i = \mu
\end{equation}

Varianza:

\begin{equation}
\text{Var}(X) = \frac{1}{n}\sum_{i=1}^n (x_i-\mu)^2
\end{equation}

## Ejemplos y Aplicaciones

::: {#exm-dado}
### Lanzamiento de un dado

Un dado justo representa una distribución $X\sim \text{unif} \{1, 2, 3, 4, 5, 6\}$.

```{r}
#| code-fold: true
#| label: dado-ejemplo

# Parámetros del dado
x_1 <- 1
x_6 <- 6
valores <- x_1:x_6
probabilidades <- rep(1/length(valores), length(valores))

# Crear data frame
dado_data <- data.frame(
  Valor = valores,
  Probabilidad = probabilidades
)

# Mostrar tabla
kable(dado_data, 
      caption = "Distribución de probabilidad de un dado",
      align = "cc") %>%
  kable_styling(bootstrap_options = "striped")
```

**Cálculo de parámetros:**

```{r}
#| code-fold: true
#| label: parametros-dado
# Media
media <- sum(dado_data$Valor)/length(dado_data$Valor)
cat("Media:", media, "\n")

# Varianza
varianza <- sum((dado_data$Valor- media)^2)/length(dado_data$Valor)
cat("Varianza:", varianza, "\n")

# Desviación estándar
desv_std <- sqrt(varianza)
cat("Desviación estándar:", round(desv_std, 4), "\n")
```

### Visualización

```{r}
#| code-fold: true
#| label: grafico-dado
#| fig-cap: "Función de probabilidad de un dado"

ggplot(dado_data, aes(x = Valor, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.6) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5) +
  scale_x_continuous(breaks = valores) +
  scale_y_continuous(limits = c(0, 0.20)) +
  labs(title = "Distribución Uniforme Discreta - Dado",
       x = "Valor",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

::: {#exm-num_random}
### Selección aleatoria de números

Supongamos que seleccionamos aleatoriamente un número entero entre 10 y 20 (inclusive).

**Cálculo de parámetros:**

```{r}
#| code-fold: true
#| label: ejemplo-numeros

x2_1 <- 10
x2_n <- 20
valores2 <- x2_1:x2_n
probabilidades2 <- rep(1/(length(valores2)), length(valores2))

# Data_frame
data2 <- data.frame(
  Valor = valores2,
  Probabilidad = probabilidades2
)

# Parámetros estadísticos
media2 <- mean(data2$Valor)
varianza2 <- sum((data2$Valor - media2)^2)/length(data2$Valor)
desv_std2 <- sqrt(varianza2)

cat("Media:", media2, "\n")
cat("Varianza:", round(varianza2, 4), "\n")
cat("Desviación estándar:", round(desv_std2, 4), "\n")
```

**Visualización de la función de probabilidad:**

```{r}
#| label: grafico-numeros
#| fig-cap: "Distribución uniforme discreta entre 10 y 20"


ggplot(data2, aes(x = Valor, y = Probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), 
            vjust = -0.5, size = 3) +
  scale_x_continuous(breaks = seq(10, 20, 1)) +
  labs(title = "Distribución Uniforme Discreta",
       x = "Valor",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

::: {#exm-simulacion}
### Simulación en R

Generación de números aleatorios de una variable aleatoria $X\sim unif\{1, 2, 3, 4, 5, 6\}$ y comparación con las probabilidades teóricas.

```{r}
#| code-fold: true
#| label: simulacion

# Generar 1000 números aleatorios
set.seed(123)
n_sim <- 1000
muestra <- sample(1:6, n_sim, replace = TRUE)

# Frecuencias observadas
freq_obs <- table(muestra)
freq_rel <- prop.table(freq_obs)

# Comparar con probabilidades teóricas
comparacion <- data.frame(
  Valor = 1:6,
  Prob_Teorica = rep(1/6, 6),
  Freq_Observada = as.numeric(freq_rel)
)

kable(comparacion, 
      caption = "Comparación entre probabilidades teóricas y observadas",
      col.names = c("Valor", "Prob. Teórica", "Freq. Observada"),
      digits = 4) |> 
  kable_styling(bootstrap_options = "striped")
```

<br>

**Visualización de la simulación**

```{r}
#| code-fold: true
#| label: grafico-simulacion
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Comparación entre distribución teórica y simulada"


# Preparar datos para el gráfico
comp_long <- comparacion |> 
  pivot_longer(cols = c(Prob_Teorica, Freq_Observada),
               names_to = "Tipo",
               values_to = "Probabilidad") |> 
  mutate(Tipo = case_when(
    Tipo == "Prob_Teorica" ~ "Teórica",
    Tipo == "Freq_Observada" ~ "Observada"
  ))

ggplot(comp_long, aes(x = Valor, y = Probabilidad, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.7) +
  scale_x_continuous(breaks = 1:6) +
  scale_fill_manual(values = c("Teórica" = "blue", "Observada" = "red")) +
  labs(title = paste("Simulación con", n_sim, "observaciones"),
       x = "Valor",
       y = "Probabilidad",
       fill = "Distribución") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```
:::

## Aplicaciones Prácticas

La distribución uniforme discreta tiene múltiples aplicaciones:

1.  **Juegos de azar**: Dados, ruletas, sorteos
2.  **Muestreo**: Selección aleatoria de elementos
3.  **Simulación**: Generación de números aleatorios equiprobables
4.  **Investigación**: Asignación aleatoria de tratamientos

## Propiedades Importantes

### Relación con otras distribuciones

-   Caso especial de la distribución categórica con probabilidades iguales
-   Límite discreto de la distribución uniforme continua
-   Base para generar otras distribuciones discretas

### Teorema Central del Límite

Verifiquemos el Teorema Central del Límite mediante simulación para el caso de variables aleatorias con distribución uniforme discreta.

Generaremos $k=1000$ muestras cada una de tamaño $n=30$ de una distribución uniforme discreta en el conjunto $\{1, 2, 3, 4, 5, 6\}$ y observaremos la distribución de sus medias muestrales. En el @exm-dado se obtuvo que para $X\sim \text{unif}\{1, 2, 3, 4, 5, 6\}$ tenemos $\mu=7/2$ y $\sigma^2= 35/12$, luego la media muestral:

$$\bar{X}_{30}=\frac{1}{30}\sum_{i=1}^{30} X_i$$ Tendrá aproximadamente la siguiente distribución:

$$\bar{X}_n \sim N\left(\mu, \frac{\sigma^2}{n} \right)$$

Es decir

$$\bar{X}_{30} \sim N\left(\frac{7}{2}, \frac{7}{72} \right)$$

```{r}
#| code-fold: true
#| label: limite-central
#| fig-width: 8
#| fig-height: 6
#| fig-align: "center"
#| fig-cap: "Verificación del Teorema del Límite Central"
# Simular medias muestrales
set.seed(456)
k_muestra <- 1000
n_muestra <- 30

medias_muestrales <- replicate(k_muestra, {
  muestra <- sample(1:6, n_muestra, replace = TRUE)
  mean(muestra)
})

# Crear histograma
hist_data <- data.frame(Medias = medias_muestrales)

ggplot(hist_data) +
  geom_histogram(aes(x=Medias, after_stat(density)), bins = 30, 
                 fill = "lightblue", alpha = 0.7, color = "black") +
  geom_density(aes(x = Medias), color = "red", linewidth = 1) +
  geom_vline(xintercept = mean(medias_muestrales), 
             color = "blue", linetype = "dashed", linewidth = 1) +
  labs(title = "Distribución de Medias Muestrales",
       subtitle = paste("n =", n_muestra, " de una v.a. uniforme(1,6)"),
       x = "Media Muestral",
       y = "Densidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))

# Estadísticas
cat("Media teórica:", (1+6)/2, "\n")
cat("Media observada:", round(mean(medias_muestrales), 4), "\n")
cat("Varianza teórica de la media:", round(((6-1+1)^2-1)/12/n_muestra, 4), "\n")
cat("Varianza observada de la media:", round(var(medias_muestrales), 4), "\n")
```

## Ejercicios Propuestos

::: {#exr-muestras}
Una urna contiene 8 bolas numeradas del 1 al 8. Se extrae una bola al azar. Calcule la probabilidad de obtener un número par.

```{r}


# Espacio muestral: bolas del 1 al 8
bolas <- 1:8
n_total <- length(bolas)

# Números pares en el conjunto
numeros_pares <- bolas[bolas %% 2 == 0]
n_pares <- length(numeros_pares)

# Probabilidad de obtener un número par
prob_par <- n_pares / n_total

cat("ESPACIO MUESTRAL: {", paste(bolas, collapse = ", "), "}\n")
cat("Números pares: {", paste(numeros_pares, collapse = ", "), "}\n")
cat("Total de bolas:", n_total, "\n")
cat("Total de bolas pares:", n_pares, "\n")
cat("Probabilidad de obtener número par:", prob_par, "\n")
cat("Fracción:", n_pares, "/", n_total, "=", prob_par, "\n")
```


:::

::: {#exr-enteros}
En un juego, se selecciona aleatoriamente un número entero entre 5 y 15 (inclusive). Calcule la media y la varianza de esta distribución.

```{r}


# Definir el rango
min_val <- 5
max_val <- 15
numeros <- min_val:max_val
n <- length(numeros)

# Media teórica de distribución uniforme discreta
media_teorica <- (min_val + max_val) / 2

# Varianza teórica de distribución uniforme discreta
varianza_teorica <- (n^2 - 1) / 12

# Desviación estándar
desviacion_teorica <- sqrt(varianza_teorica)

cat("DISTRIBUCIÓN UNIFORME DISCRETA U(", min_val, ",", max_val, ")\n")
cat("Espacio muestral: {", paste(numeros, collapse = ", "), "}\n")
cat("Número de elementos (n):", n, "\n")
cat("Media teórica (a+b)/2: (", min_val, "+", max_val, ")/2 =", media_teorica, "\n")
cat("Varianza teórica (n²-1)/12: (", n, "² - 1)/12 =", round(varianza_teorica, 4), "\n")
cat("Desviación estándar:", round(desviacion_teorica, 4), "\n")
```


:::

::: {#exr-simulacion_4}
Simule 500 observaciones de una distribución uniforme discreta en {0, 1, 2, 3, 4} y compare las frecuencias observadas con las teóricas.

```{r}


set.seed(123)  # Para reproducibilidad
n_observaciones <- 500
valores_posibles <- 0:4

# Simular 500 observaciones
observaciones <- sample(valores_posibles, size = n_observaciones, replace = TRUE)

# Frecuencias observadas
frecuencias_obs <- table(observaciones)
frecuencias_rel_obs <- frecuencias_obs / n_observaciones

# Frecuencias teóricas (distribución uniforme)
prob_teorica <- 1 / length(valores_posibles)
frecuencias_teor <- rep(prob_teorica, length(valores_posibles))

cat("SIMULACIÓN DE DISTRIBUCIÓN UNIFORME DISCRETA U(0,4)\n")
cat("Número de observaciones:", n_observaciones, "\n")
cat("Valores posibles: {", paste(valores_posibles, collapse = ", "), "}\n")
cat("Probabilidad teórica de cada valor:", round(prob_teorica, 4), "\n\n")
```

```{r}
# TABLA COMPARATIVA DE FRECUENCIAS
cat("TABLA COMPARATIVA - FRECUENCIAS OBSERVADAS VS TEÓRICAS\n")
cat("=====================================================\n")

tabla_comparativa <- data.frame(
  Valor = valores_posibles,
  Frecuencia_Observada = as.numeric(frecuencias_obs),
  Frecuencia_Rel_Obs = round(as.numeric(frecuencias_rel_obs), 4),
  Frecuencia_Rel_Teor = round(frecuencias_teor, 4),
  Diferencia = round(abs(as.numeric(frecuencias_rel_obs) - frecuencias_teor), 4)
)

print(tabla_comparativa)

cat("\nRESUMEN:\n")
cat("Diferencia promedio:", round(mean(tabla_comparativa$Diferencia), 4), "\n")
cat("Diferencia máxima:", round(max(tabla_comparativa$Diferencia), 4), "\n")
```

```{r}
# GRÁFICO COMPARATIVO
library(ggplot2)

# Preparar datos para el gráfico
datos_grafico <- data.frame(
  Valor = rep(valores_posibles, 2),
  Frecuencia = c(tabla_comparativa$Frecuencia_Rel_Obs, 
                 tabla_comparativa$Frecuencia_Rel_Teor),
  Tipo = rep(c("Observada", "Teórica"), each = length(valores_posibles))
)

ggplot(datos_grafico, aes(x = factor(Valor), y = Frecuencia, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_hline(yintercept = prob_teorica, linetype = "dashed", 
             color = "red", alpha = 0.7) +
  scale_fill_manual(values = c("Observada" = "steelblue", "Teórica" = "coral")) +
  labs(
    title = "Distribución Uniforme Discreta U(0,4)",
    subtitle = paste("Comparación frecuencias observadas vs teóricas -", 
                     n_observaciones, "observaciones"),
    x = "Valor",
    y = "Frecuencia Relativa",
    fill = "Tipo"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
```
```{r}
# PRUEBA DE BONDAD DE AJUSTE CHI-CUADRADO
cat("PRUEBA DE BONDAD DE AJUSTE CHI-CUADRADO\n")
cat("======================================\n")

# Frecuencias esperadas
frecuencias_esp <- rep(n_observaciones * prob_teorica, length(valores_posibles))

# Estadístico chi-cuadrado
chi_cuadrado <- sum((frecuencias_obs - frecuencias_esp)^2 / frecuencias_esp)
grados_libertad <- length(valores_posibles) - 1
valor_p <- 1 - pchisq(chi_cuadrado, df = grados_libertad)

cat("Frecuencias observadas:", frecuencias_obs, "\n")
cat("Frecuencias esperadas:", frecuencias_esp, "\n")
cat("Estadístico chi-cuadrado:", round(chi_cuadrado, 4), "\n")
cat("Grados de libertad:", grados_libertad, "\n")
cat("Valor p:", round(valor_p, 4), "\n")

if (valor_p > 0.05) {
  cat("Conclusión: No hay evidencia para rechazar que los datos siguen una distribución uniforme (p > 0.05)\n")
} else {
  cat("Conclusión: Hay evidencia para rechazar que los datos siguen una distribución uniforme (p ≤ 0.05)\n")
}
```

```{r}
# ANÁLISIS ESTADÍSTICO DE LA MUESTRA SIMULADA
cat("ANÁLISIS ESTADÍSTICO DE LA MUESTRA SIMULADA\n")
cat("===========================================\n")

media_muestra <- mean(observaciones)
varianza_muestra <- var(observaciones)
desviacion_muestra <- sd(observaciones)

cat("Media de la muestra:", round(media_muestra, 4), "\n")
cat("Varianza de la muestra:", round(varianza_muestra, 4), "\n")
cat("Desviación estándar de la muestra:", round(desviacion_muestra, 4), "\n")

# Valores teóricos para U(0,4)
media_teorica_u <- (0 + 4) / 2
varianza_teorica_u <- (5^2 - 1) / 12  # n=5 elementos (0,1,2,3,4)

cat("\nCOMPARACIÓN CON VALORES TEÓRICOS U(0,4):\n")
cat("Media teórica:", media_teorica_u, "\n")
cat("Varianza teórica:", round(varianza_teorica_u, 4), "\n")
cat("Diferencia en medias:", round(abs(media_muestra - media_teorica_u), 4), "\n")
cat("Diferencia en varianzas:", round(abs(varianza_muestra - varianza_teorica_u), 4), "\n")
```

```{r}
# HISTOGRAMA DE LA DISTRIBUCIÓN SIMULADA
ggplot(data.frame(Observaciones = observaciones), aes(x = Observaciones)) +
  geom_histogram(aes(y = after_stat(density)), binwidth = 1, 
                 fill = "lightblue", alpha = 0.7, color = "black") +
  geom_hline(yintercept = prob_teorica, color = "red", 
             linetype = "dashed", size = 1) +
  annotate("text", x = 2, y = prob_teorica + 0.02, 
           label = paste("Probabilidad teórica =", round(prob_teorica, 3)), 
           color = "red") +
  scale_x_continuous(breaks = valores_posibles) +
  labs(
    title = "Histograma de Observaciones Simuladas",
    subtitle = "Distribución Uniforme Discreta U(0,4)",
    x = "Valor",
    y = "Densidad"
  ) +
  theme_minimal()
```

:::
