---
title: "Distribución Binomial Negativa"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r setup, include=FALSE}
library(ggplot2)
library(dplyr)
library(knitr)
library(gridExtra)
library(plotly)
```

La **distribución binomial negativa** modela el número de fracasos que ocurren antes de obtener exactamente $r$ éxitos en una secuencia de ensayos independientes de Bernoulli, donde cada ensayo tiene una probabilidad constante $p$ de éxito.

::: {#def-binom_neg}
Si $X$ es una variable aleatoria que sigue una distribución binomial negativa, entonces $X$ representa el número de fracasos antes de obtener el $r$-ésimo éxito. La función probabilidad está dada por:

$$f(x) = \binom{r + x - 1}{x} p^r (1-p)^x$$

donde $x = 0, 1, 2, 3, \ldots$ representa el número de fracasos. Una variable aleatoria con esta distribución se denota como: $X \sim \text{BinNeg}(r, p)$
:::

## Características

**Parámetros**

La distribución binomial negativa tiene dos parámetros:

-   $r$: Número de éxitos deseados (entero positivo, $r \geq 1$)
-   $p$: Probabilidad de éxito en cada ensayo ($0 < p \leq 1$)

**Parámetros Estadísticos**

Media (Esperanza):

$$E(X) = \frac{r(1-p)}{p}$$

Varianza:

$$\text{Var}(X) = \frac{r(1-p)}{p^2}$$

Desviación estándar:

$$\sigma = \sqrt{\frac{r(1-p)}{p^2}}$$

**Función de Distribución (Probabilidad Acumulada):**

$$F(x) = P(X \leq x) = \sum_{i=0}^{x} \binom{r + i - 1}{i} p^r (1-p)^i$$

## Ejemplo Básico

Un estudiante está practicando tiros libres de baloncesto. Su probabilidad de anotar es $p = 0.6$. ¿Cuál es la probabilidad de que falle exactamente 3 tiros antes de anotar su segundo tiro libre?

**Parámetros:**

-   $r = 2$ (queremos el segundo éxito)
-   $p = 0.6$ (probabilidad de éxito)
-   $k = 3$ (número de fracasos)

**Cálculo:**

```{r ejemplo-basico}
# Parámetros
r <- 2
p <- 0.6
k <- 3

# Cálculo de la probabilidad
prob <- choose(k + r - 1, k) * (p^r) * ((1-p)^k)
cat("P(X = 3) =", round(prob, 4))

# Verificación usando R
prob_r <- dnbinom(k, size = r, prob = p)
cat("\nVerificación con R:", round(prob_r, 4))
```

**Interpretación:** La probabilidad de fallar exactamente 3 tiros antes de anotar el segundo tiro libre es aproximadamente `r round(prob, 4)`.

**Parámetros estadísticos del ejemplo**

```{r parametros-ejemplo}
# Media
media <- r * (1 - p) / p
cat("Media:", round(media, 4))

# Varianza
varianza <- r * (1 - p) / (p^2)
cat("\nVarianza:", round(varianza, 4))

# Desviación estándar
desv_std <- sqrt(varianza)
cat("\nDesviación estándar:", round(desv_std, 4))
```

## Comparación: Efecto de los Parámetros

### Efecto del parámetro $r$ (número de éxitos)

```{r efecto-r, fig.cap="Efecto del parámetro r en la distribución binomial negativa"}
# Valores de k para graficar
k_vals <- 0:20

# Diferentes valores de r, p fijo
r_values <- c(1, 2, 5, 10)
p_fixed <- 0.4

# Crear data frame para ggplot
data_r <- expand.grid(k = k_vals, r = r_values)
data_r$p <- p_fixed
data_r$prob <- dnbinom(data_r$k, size = data_r$r, prob = data_r$p)
data_r$r <- factor(data_r$r, labels = paste("r =", r_values))

# Gráfico
plot_r <- ggplot(data_r, aes(x = k, y = prob, fill = r)) +
  geom_col(position = "dodge", alpha = 0.7) +
  scale_x_continuous(breaks = k_vals) +
  labs(title = "Efecto del parámetro r (p = 0.4 fijo)",
       x = "Número de fracasos (k)",
       y = "Probabilidad",
       fill = "Parámetro r") +
  theme_minimal() +
  scale_fill_brewer(type = "qual", palette = "Set1")

ggplotly(plot_r)
```

### Efecto del parámetro $p$ (probabilidad de éxito)

```{r efecto-p, fig.cap="Efecto del parámetro p en la distribución binomial negativa"}
# Diferentes valores de p, r fijo
p_values <- c(0.2, 0.4, 0.6, 0.8)
r_fixed <- 3

# Crear data frame para ggplot
data_p <- expand.grid(k = k_vals, p = p_values)
data_p$r <- r_fixed
data_p$prob <- dnbinom(data_p$k, size = data_p$r, prob = data_p$p)
data_p$p <- factor(data_p$p, labels = paste("p =", p_values))

# Gráfico
plot_p <- ggplot(data_p, aes(x = k, y = prob, fill = p)) +
  geom_col(position = "dodge", alpha = 0.7) +
  scale_x_continuous(breaks = k_vals) +
  labs(title = "Efecto del parámetro p (r = 3 fijo)",
       x = "Número de fracasos (k)",
       y = "Probabilidad",
       fill = "Parámetro p") +
  theme_minimal() +
  scale_fill_brewer(type = "qual", palette = "Set2")

 ggplotly(plot_p)
```

### Tabla comparativa de parámetros estadísticos

```{r tabla-comparativa}
# Crear tabla con diferentes combinaciones de parámetros
combinaciones <- expand.grid(
  r = c(2, 5, 10),
  p = c(0.3, 0.5, 0.7)
)

combinaciones$Media <- combinaciones$r * (1 - combinaciones$p) / combinaciones$p
combinaciones$Varianza <- combinaciones$r * (1 - combinaciones$p) / (combinaciones$p^2)
combinaciones$Desv_Std <- sqrt(combinaciones$Varianza)

# Redondear para mejor presentación
combinaciones[3:5] <- round(combinaciones[3:5], 3)

kable(combinaciones, 
      caption = "Parámetros estadísticos para diferentes valores de r y p",
      col.names = c("r", "p", "Media", "Varianza", "Desv. Estándar"))
```

### Observaciones sobre el efecto de los parámetros

**Efecto de** $r$:

-   Al aumentar $r$, la distribución se desplaza hacia la derecha (mayor media)
-   La variabilidad también aumenta
-   Para $r = 1$, se obtiene la distribución geométrica

**Efecto de** $p$:

-   Al aumentar $p$ (mayor probabilidad de éxito), la distribución se concentra más cerca de cero
-   La media y varianza disminuyen cuando $p$ aumenta

## Simulación de Valores y Comparación con la Teórica

Consideremos una variable aleatoria $X \sim \text{BinNeg}(r=5, p=0.3)$. Simularemos 10,000 valores y compararemos las estadísticas obtenidas con las teóricas.

```{r simulacion-basica}
# Parámetros para la simulación
r <- 5
p <- 0.3
n_sim <- 10000

# Simulación de valores
set.seed(422)
valores_simulados <- rnbinom(n_sim, size = r, prob = p)

# Estadísticas de la simulación
media_sim <- mean(valores_simulados)
var_sim <- var(valores_simulados)
sd_sim <- sd(valores_simulados)

# Valores teóricos
media_teorica <- r * (1 - p) / p
var_teorica <- r * (1 - p) / (p^2)
sd_teorica <- sqrt(var_teorica)

# Tabla comparativa
comparacion <- data.frame(
  Estadística = c("Media", "Varianza", "Desv. Estándar"),
  Teórica = c(media_teorica, var_teorica, sd_teorica),
  Simulada = c(media_sim, var_sim, sd_sim),
  Diferencia = c(abs(media_teorica - media_sim), 
                 abs(var_teorica - var_sim), 
                 abs(sd_teorica - sd_sim))
)

kable(comparacion, digits = 4, 
      caption = paste("Comparación teórica vs simulada (r =", r, ", p =", p, ")"))
```

**Visualización**

```{r grafico-comparacion, fig.cap="Comparación entre distribución teórica y simulada"}
# Rango de valores para comparar
k_max <- quantile(valores_simulados, 0.99)
k_vals <- 0:k_max

# Probabilidades teóricas
prob_teorica <- dnbinom(k_vals, size = r, prob = p)

# Frecuencias relativas de la simulación
freq_simulada <- table(factor(valores_simulados, levels = k_vals))
freq_relativa <- as.numeric(freq_simulada) / n_sim

# Crear data frame para ggplot
data_comp <- data.frame(
  k = rep(k_vals, 2),
  Probabilidad = c(prob_teorica, freq_relativa),
  Tipo = rep(c("Teórica", "Simulada"), each = length(k_vals))
)

# Gráfico de barras comparativo
ggplot(data_comp, aes(x = k, y = Probabilidad, fill = Tipo)) +
  geom_col(position = "dodge", alpha = 0.7, width = 0.8) +
  labs(title = paste("Distribución Binomial Negativa: Teórica vs Simulada"),
       subtitle = paste("r =", r, ", p =", p, ", n =", format(n_sim, big.mark = ",")),
       x = "Número de fracasos (k)",
       y = "Probabilidad / Frecuencia relativa",
       fill = "Distribución") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_manual(values = c("Teórica" = "#2E86C1", "Simulada" = "#E74C3C")) 
```

**Convergencia de la Simulación**

```{r convergencia, fig.cap="Convergencia de la media simulada hacia la teórica"}
# Diferentes tamaños de muestra
tamaños <- seq(100, 10000, by = 100)
medias_acumuladas <- sapply(tamaños, function(n) mean(valores_simulados[1:n]))

# Data frame para el gráfico
data_conv <- data.frame(
  n = tamaños,
  Media_simulada = medias_acumuladas,
  Media_teorica = media_teorica
)

# Gráfico de convergencia
ggplot(data_conv) +
  geom_line(aes(x = n, y = Media_simulada), color = "#E74C3C", linewidth = 1) +
  geom_hline(yintercept = media_teorica, color = "#2E86C1", 
             linetype = "dashed", linewidth = 1.2) +
  labs(title = "Convergencia de la Media Simulada",
       subtitle = paste("Línea azul: Media teórica =", round(media_teorica, 3)),
       x = "Tamaño de muestra",
       y = "Media") +
  theme_minimal() +
  annotate("text", x = 7500, y = media_teorica + 0.3, 
           label = paste("Media teórica:", round(media_teorica, 3)), 
           color = "#2E86C1")
```

## Comparación entre Binomial Negativa y Geométrica

### Relación Teórica

La distribución geométrica es un caso especial de la binomial negativa cuando $r = 1$. Ambas modelan el número de fracasos antes de obtener éxitos, pero:

-   **Geométrica:** Número de fracasos antes del **primer** éxito
-   **Binomial Negativa:** Número de fracasos antes del **r-ésimo** éxito

### Comparación Matemática

```{r comparacion-matematica}
# Parámetros
p_comp <- 0.4
r_values <- c(1, 2, 5, 10)  # r = 1 corresponde a la geométrica

# Calcular parámetros estadísticos
comp_params <- data.frame(
  r = r_values,
  Media = r_values * (1 - p_comp) / p_comp,
  Varianza = r_values * (1 - p_comp) / (p_comp^2),
  Desv_Std = sqrt(r_values * (1 - p_comp) / (p_comp^2))
)

comp_params$Es_Geometrica <- ifelse(comp_params$r == 1, "Sí", "No")

kable(comp_params, digits = 3,
      caption = paste("Parámetros estadísticos para diferentes valores de r (p =", p_comp, ")"),
      col.names = c("r", "Media", "Varianza", "Desv. Estándar", "¿Geométrica?"))
```

### Comparación Gráfica

```{r grafico-geometrica-vs-binomial, fig.cap="Comparación entre distribución geométrica y binomial negativa"}
# Valores de k para graficar
k_vals <- 0:15

# Crear data frame con las distribuciones
data_dist <- expand.grid(k = k_vals, r = c(1, 2, 3, 5))
data_dist$p <- p_comp
data_dist$Probabilidad <- dnbinom(data_dist$k, size = data_dist$r, prob = data_dist$p)
data_dist$Distribucion <- ifelse(data_dist$r == 1, "Geométrica (r=1)", 
                                paste("Binomial Neg. (r=", data_dist$r, ")", sep=""))

# Gráfico
ggplot(data_dist, aes(x = k, y = Probabilidad, fill = Distribucion)) +
  geom_col(alpha = 0.7) +
  facet_wrap(~Distribucion, scales = "free_y") +
  labs(title = "Comparación: Geométrica vs Binomial Negativa",
       subtitle = paste("p =", p_comp),
       x = "Número de fracasos (k)",
       y = "Probabilidad") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(type = "qual", palette = "Set3")
```

### Verificación mediante Simulación

```{r simulacion-comparacion}
n_sim_comp <- 5000
p_sim <- 0.35

# Simulación de geométrica (r = 1)
geometrica_sim <- rnbinom(n_sim_comp, size = 1, prob = p_sim)

# Simulación de binomial negativa (r = 3)
binneg_sim <- rnbinom(n_sim_comp, size = 3, prob = p_sim)

# Estadísticas simuladas
stats_sim <- data.frame(
  Distribución = c("Geométrica (r=1)", "Binomial Neg. (r=3)"),
  Media_Simulada = c(mean(geometrica_sim), mean(binneg_sim)),
  Media_Teórica = c(1 * (1-p_sim)/p_sim, 3 * (1-p_sim)/p_sim),
  Var_Simulada = c(var(geometrica_sim), var(binneg_sim)),
  Var_Teórica = c(1 * (1-p_sim)/(p_sim^2), 3 * (1-p_sim)/(p_sim^2))
)

kable(stats_sim, digits = 3,
      caption = paste("Verificación por simulación (p =", p_sim, ", n =", 
                      format(n_sim_comp, big.mark = ","), ")"))
```

```{r histogramas-comparacion, fig.cap="Histogramas comparativos de las simulaciones"}
# Combinar datos para el gráfico
data_hist <- data.frame(
  valores = c(geometrica_sim, binneg_sim),
  distribucion = rep(c("Geométrica (r=1)", "Binomial Negativa (r=3)"), 
                     each = n_sim_comp)
)

# Histogramas comparativos
ggplot(data_hist, aes(x = valores, fill = distribucion)) +
  geom_histogram(alpha = 0.7, bins = 20, position = "identity") +
  facet_wrap(~distribucion, scales = "free") +
  labs(title = "Histogramas de las Simulaciones",
       subtitle = paste("p =", p_sim, ", n =", format(n_sim_comp, big.mark = ",")),
       x = "Número de fracasos",
       y = "Frecuencia") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("#3498DB", "#E67E22"))
```

## Aproximación con el Teorema Central del Límite

### Fundamento Teórico

Cuando $r$ es grande, la distribución binomial negativa se puede aproximar a una distribución normal:

$$X \sim \text{BinNeg}(r, p) \approx N\left(\mu = \frac{r(1-p)}{p}, \sigma^2 = \frac{r(1-p)}{p^2}\right)$$

### Demostración con Simulación

```{r tcl-demostracion, fig.cap="Aproximación normal para diferentes valores de r"}
# Parámetros para TCL
p_tcl <- 0.3
r_vals_tcl <- c(5, 10, 20, 50)
n_sim_tcl <- 5000

# Función para crear datos de comparación
crear_datos_tcl <- function(r_val, p_val, n_sim) {
  # Simulación
  sim_vals <- rnbinom(n_sim, size = r_val, prob = p_val)
  
  # Parámetros teóricos
  mu <- r_val * (1 - p_val) / p_val
  sigma2 <- r_val * (1 - p_val) / (p_val^2)
  sigma <- sqrt(sigma2)
  
  # Normalizar
  z_vals <- (sim_vals - mu) / sigma
  
  return(list(
    originales = sim_vals,
    normalizados = z_vals,
    mu = mu,
    sigma = sigma,
    r = r_val
  ))
}

# Generar datos para cada r
datos_tcl <- lapply(r_vals_tcl, crear_datos_tcl, p_val = p_tcl, n_sim = n_sim_tcl)

# Crear data frame para ggplot
data_tcl <- do.call(rbind, lapply(1:length(datos_tcl), function(i) {
  data.frame(
    valores_norm = datos_tcl[[i]]$normalizados,
    r_valor = paste("r =", datos_tcl[[i]]$r)
  )
}))

# Gráfico de densidad con aproximación normal
ggplot(data_tcl, aes(x = valores_norm)) +
  geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 30, fill = "#3498DB") +
  stat_function(fun = dnorm, args = list(mean = 0, sd = 1), 
                color = "#E74C3C", linewidth = 1.2, linetype = "dashed") +
  facet_wrap(~r_valor, scales = "free") +
  labs(title = "Aproximación Normal (Teorema Central del Límite)",
       subtitle = paste("Valores normalizados, p =", p_tcl, 
                       ". Línea roja: N(0,1)"),
       x = "Valores normalizados (Z)",
       y = "Densidad") +
  theme_minimal()
```

## Relación con la Suma de Variables Geométricas

::: {#prp-binneg_geo}
Si $X_1, X_2, \ldots, X_r$ son variables aleatorias independientes e idénticamente distribuidas con distribución geométrica de parámetro $p$ (número de fracasos antes del primer éxito), entonces:

$$Y = X_1 + X_2 + \cdots + X_r \sim \text{BinNeg}(r, p)$$

Es decir, la suma de $r$ variables aleatorias geométricas independientes sigue una distribución binomial negativa con parámetros $r$ y $p$.
:::

**Justificación intuitiva**

-   Cada $X_i$ cuenta los fracasos antes del $i$-ésimo éxito
-   $Y = \sum_{i=1}^r X_i$ cuenta el total de fracasos antes de obtener $r$ éxitos
-   Esto es exactamente lo que modela la distribución binomial negativa

### Verificación por Simulación

```{r simulacion-proposicion}
# Parámetros
r <- 4
p <- 0.3
n_sim <- 10000

set.seed(42)

# Método 1: Generar r variables geométricas y sumarlas
suma_geometricas <- replicate(n_sim, {
  geometricas <- rgeom(r, prob = p)  # rgeom en R usa la definición estándar
  sum(geometricas)
})

# Método 2: Generar directamente de binomial negativa
binomial_negativa <- rnbinom(n_sim, size = r, prob = p)

# Comparar estadísticas
stats_comparacion <- data.frame(
  Método = c("Suma de Geométricas", "Binomial Negativa Directa"),
  Media = c(mean(suma_geometricas), mean(binomial_negativa)),
  Varianza = c(var(suma_geometricas), var(binomial_negativa)),
  Desv_Std = c(sd(suma_geometricas), sd(binomial_negativa)),
  Min = c(min(suma_geometricas), min(binomial_negativa)),
  Max = c(max(suma_geometricas), max(binomial_negativa))
)

# Valores teóricos
media_teorica <- r * (1 - p) / p
var_teorica <- r * (1 - p) / (p^2)

stats_comparacion$Dif_Media_Teorica <- abs(stats_comparacion$Media - media_teorica)
stats_comparacion$Dif_Var_Teorica <- abs(stats_comparacion$Varianza - var_teorica)

kable(stats_comparacion, digits = 4,
      caption = paste("Verificación de la proposición (r =", r, ", p =", p, ")"))

cat("Valores teóricos:\n")
cat("Media:", round(media_teorica, 4), "\n")
cat("Varianza:", round(var_teorica, 4), "\n")
```

```{r comparacion-distribuciones, fig.cap="Comparación de histogramas: Suma de geométricas vs Binomial negativa"}
# Crear data frame para comparación
data_comparacion <- data.frame(
  valores = c(suma_geometricas, binomial_negativa),
  metodo = rep(c("Suma de r=4 Geométricas", "Binomial Negativa (r=4)"), 
               each = n_sim)
)

# Histogramas comparativos
ggplot(data_comparacion, aes(x = valores, fill = metodo)) +
  geom_histogram(alpha = 0.6, bins = 30, position = "identity") +
  facet_wrap(~metodo, ncol = 1) +
  labs(title = "Verificación de la Proposición: Suma de Geométricas = Binomial Negativa",
       subtitle = paste("r =", r, ", p =", p, ", n =", format(n_sim, big.mark = ",")),
       x = "Número de fracasos",
       y = "Frecuencia") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c("#3498DB", "#E74C3C"))
```

## Ejemplos Prácticos

::: {#exm-calidadbinneg}
### Control de Calidad en Producción

**Situación:** Una fábrica produce componentes electrónicos. La probabilidad de que un componente sea defectuoso es $p = 0.15$. Un inspector necesita encontrar 3 componentes buenos para completar un lote.

**Pregunta:** ¿Cuál es la probabilidad de que el inspector examine exactamente 8 componentes defectuosos antes de encontrar los 3 buenos?

```{r ejemplo-calidad}
# Parámetros del problema
p_bueno <- 0.85  # Probabilidad de componente bueno
r_buenos <- 3    # Componentes buenos necesarios
k_defectuosos <- 8  # Componentes defectuosos observados

# Método 1: Usando binomial negativa directamente
prob_binneg <- dnbinom(k_defectuosos, size = r_buenos, prob = p_bueno)

# Método 2: Simulación como suma de geométricas
# Cada geométrica cuenta defectuosos antes de cada componente bueno
n_sim_ej1 <- 100000
suma_defectuosos <- replicate(n_sim_ej1, {
  sum(rgeom(r_buenos, prob = p_bueno))
})

prob_simulada <- mean(suma_defectuosos == k_defectuosos)

cat("EJEMPLO 1: Control de Calidad\n")
cat("=============================\n")
cat("Probabilidad (fórmula):", round(prob_binneg, 6), "\n")
cat("Probabilidad (simulación):", round(prob_simulada, 6), "\n")
cat("Diferencia:", abs(prob_binneg - prob_simulada), "\n\n")

# Interpretación práctica
cat("Interpretación: La probabilidad de examinar exactamente 8 componentes\n")
cat("defectuosos antes de encontrar 3 buenos es aproximadamente", 
    round(prob_binneg * 100, 2), "%\n")
```
:::

::: {#exm-ventas_prosp}
**Situación:** Un vendedor tiene una tasa de éxito del 25% en sus presentaciones. Necesita cerrar 5 ventas para cumplir su meta mensual.

**Preguntas:** 1. ¿Cuál es el número esperado de rechazos antes de cerrar 5 ventas? 2. ¿Cuál es la probabilidad de tener entre 10 y 15 rechazos?

```{r ejemplo-ventas}
# Parámetros
p_exito <- 0.25
r_ventas <- 5

# 1. Número esperado de rechazos
rechazos_esperados <- r_ventas * (1 - p_exito) / p_exito
desv_std_rechazos <- sqrt(r_ventas * (1 - p_exito) / (p_exito^2))

# 2. Probabilidad entre 10 y 15 rechazos
prob_10_15 <- sum(dnbinom(10:15, size = r_ventas, prob = p_exito))

# Simulación para verificar
n_sim_ej2 <- 50000
simulacion_ventas <- replicate(n_sim_ej2, {
  sum(rgeom(r_ventas, prob = p_exito))
})

rechazos_sim_esperados <- mean(simulacion_ventas)
prob_10_15_sim <- mean(simulacion_ventas >= 10 & simulacion_ventas <= 15)

cat("EJEMPLO 2: Ventas y Prospección\n")
cat("================================\n")
cat("1. Rechazos esperados:\n")
cat("   Teórico:", round(rechazos_esperados, 2), "±", round(desv_std_rechazos, 2), "\n")
cat("   Simulación:", round(rechazos_sim_esperados, 2), "\n\n")

cat("2. P(10 ≤ rechazos ≤ 15):\n")
cat("   Teórico:", round(prob_10_15, 4), "\n")
cat("   Simulación:", round(prob_10_15_sim, 4), "\n")
```
:::

::: {#exm-algoritmo}
**Situación:** Un algoritmo de machine learning busca patrones específicos en datos. La probabilidad de encontrar un patrón válido es 0.4. El algoritmo necesita encontrar 6 patrones para entrenar el modelo.

```{r ejemplo-ml, fig.cap="Distribución de iteraciones fallidas en machine learning"}
# Parámetros
p_patron <- 0.4
r_patrones <- 6

# Simulación del proceso
n_experimentos <- 10000
iteraciones_fallidas <- replicate(n_experimentos, {
  sum(rgeom(r_patrones, prob = p_patron))
})

# Estadísticas
media_iteraciones <- mean(iteraciones_fallidas)
percentiles <- quantile(iteraciones_fallidas, probs = c(0.25, 0.5, 0.75, 0.9, 0.95))

cat("EJEMPLO 3: Machine Learning\n")
cat("===========================\n")
cat("Iteraciones fallidas esperadas:", round(media_iteraciones, 1), "\n")
cat("Percentiles:\n")
print(round(percentiles, 1))

# Gráfico de la distribución
ggplot(data.frame(iteraciones = iteraciones_fallidas), aes(x = iteraciones)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "#3498DB", alpha = 0.7) +
  geom_vline(xintercept = media_iteraciones, color = "#E74C3C", 
             linetype = "dashed", linewidth = 1) +
  labs(title = "Distribución de Iteraciones Fallidas en ML",
       subtitle = paste("p =", p_patron, ", r =", r_patrones, 
                       ". Línea roja: media =", round(media_iteraciones, 1)),
       x = "Número de iteraciones fallidas",
       y = "Densidad") +
  theme_minimal()
```
:::

## Ejercicios Propuestos

::: {#exr-grafico}
Implemente una función que tome como parámetros $(r, p, n_{sim})$ y devuelva un gráfico comparativo entre la suma de geométricas y la binomial negativa.

```{r}
# FUNCIÓN PARA GRÁFICO COMPARATIVO
grafico_comparativo <- function(r, p, n_sim = 10000) {
  # Verificar parámetros
  if (r <= 0 | p <= 0 | p > 1) {
    stop("Parámetros inválidos: r debe ser > 0, p entre 0 y 1")
  }
  
  # Simular suma de r variables geométricas
  set.seed(123)
  suma_geometricas <- replicate(n_sim, {
    sum(rgeom(r, prob = p))
  })
  
  # Generar distribución binomial negativa teórica
  x_max <- qnbinom(0.999, size = r, prob = p)
  x_valores <- 0:x_max
  prob_teorica <- dnbinom(x_valores, size = r, prob = p)
  datos_teoricos <- data.frame(x = x_valores, Probabilidad = prob_teorica)
  
  # Datos simulados
  datos_simulados <- data.frame(Suma = suma_geometricas)
  
  # Crear gráfico comparativo
  library(ggplot2)
  ggplot() +
    geom_histogram(
      data = datos_simulados,
      aes(x = Suma, y = after_stat(density)),
      binwidth = 1, alpha = 0.6, fill = "steelblue"
    ) +
    geom_point(
      data = datos_teoricos,
      aes(x = x, y = Probabilidad),
      color = "red", size = 1.5
    ) +
    geom_line(
      data = datos_teoricos,
      aes(x = x, y = Probabilidad),
      color = "red", linetype = "dashed", alpha = 0.7
    ) +
    labs(
      title = paste("Comparación: Suma de", r, "Geométricas vs Binomial Negativa"),
      subtitle = paste("p =", p, "| Simulaciones:", n_sim),
      x = "Número de fracasos hasta r-ésimo éxito",
      y = "Densidad/Probabilidad"
    ) +
    theme_minimal()
}

# Ejemplo de uso
grafico_comparativo(r = 4, p = 0.3, n_sim = 5000)
```
:::

::: {#exr-baloncesto}
Un jugador de baloncesto tiene 70% de efectividad en tiros libres. En una sesión de entrenamiento quiere anotar 8 tiros libres consecutivos exitosos.

```{r}
# EJERCICIO 2: JUGADOR DE BALONCESTO

p_exito <- 0.70
r_exitos <- 8

# a) Modelado como suma de geométricas
# X ~ NB(r=8, p=0.7) donde X = número de fracasos antes del 8vo éxito

# b) Número esperado de tiros fallados
# E[X] = r*(1-p)/p
tiros_fallados_esperados <- r_exitos * (1 - p_exito) / p_exito
cat("b) Número esperado de tiros fallados:", round(tiros_fallados_esperados, 2), "\n")

# Número total esperado de tiros
tiros_totales_esperados <- r_exitos / p_exito
cat("   Número total esperado de tiros:", round(tiros_totales_esperados, 2), "\n")

# c) Simulación de 1000 sesiones
set.seed(456)
n_simulaciones <- 1000

simular_sesion <- function() {
  exitos_consecutivos <- 0
  tiros_totales <- 0
  tiros_fallados <- 0
  
  while (exitos_consecutivos < r_exitos) {
    tiro <- sample(c(1, 0), size = 1, prob = c(p_exito, 1 - p_exito))
    tiros_totales <- tiros_totales + 1
    
    if (tiro == 1) {
      exitos_consecutivos <- exitos_consecutivos + 1
    } else {
      tiros_fallados <- tiros_fallados + 1
      exitos_consecutivos <- 0  # Reiniciar conteo si falla
    }
  }
  
  return(c(tiros_fallados, tiros_totales))
}

# Ejecutar simulaciones
resultados <- replicate(n_simulaciones, simular_sesion())
tiros_fallados_sim <- resultados[1, ]
tiros_totales_sim <- resultados[2, ]

cat("\nc) RESULTADOS DE SIMULACIÓN (1000 sesiones):\n")
cat("   Tiros fallados promedio:", round(mean(tiros_fallados_sim), 2), "\n")
cat("   Tiros totales promedio:", round(mean(tiros_totales_sim), 2), "\n")
cat("   Diferencia con valor teórico:", 
    round(abs(mean(tiros_fallados_sim) - tiros_fallados_esperados), 3), "\n")
```

```{r}
# GRÁFICO PARA EJERCICIO 2
library(ggplot2)

datos_simulacion <- data.frame(
  Tiros_Fallados = tiros_fallados_sim
)

ggplot(datos_simulacion, aes(x = Tiros_Fallados)) +
  geom_histogram(aes(y = after_stat(density)), binwidth = 2, 
                 fill = "lightblue", alpha = 0.7) +
  geom_vline(xintercept = tiros_fallados_esperados, 
             color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = mean(tiros_fallados_sim), 
             color = "blue", linetype = "dashed", size = 1) +
  annotate("text", x = tiros_fallados_esperados + 5, y = 0.03,
           label = paste("Teórico:", round(tiros_fallados_esperados, 2)), 
           color = "red") +
  annotate("text", x = mean(tiros_fallados_sim) + 5, y = 0.025,
           label = paste("Simulado:", round(mean(tiros_fallados_sim), 2)), 
           color = "blue") +
  labs(
    title = "Distribución de Tiros Fallados en Sesiones de Entrenamiento",
    subtitle = "Jugador con 70% de efectividad - 8 éxitos consecutivos requeridos",
    x = "Número de Tiros Fallados",
    y = "Densidad"
  ) +
  theme_minimal()
```


:::

::: {#exr-biotecnologia}
Un laboratorio está desarrollando un nuevo medicamento. Las pruebas tienen 30% de probabilidad de ser exitosas. Necesitan 4 pruebas exitosas para continuar con la siguiente fase.

```{r}


p_exito_prueba <- 0.30
r_exitos_requeridos <- 4
costo_prueba <- 10000  # dólares

# a) Probabilidad de tener exactamente 12 pruebas fallidas
# X ~ NB(r=4, p=0.3), P(X=12)
prob_12_fallidas <- dnbinom(12, size = r_exitos_requeridos, prob = p_exito_prueba)
cat("a) P(exactamente 12 fallidas):", round(prob_12_fallidas, 4), "\n")

# b) Probabilidad de necesitar más de 20 pruebas fallidas
# P(X > 20) = 1 - P(X ≤ 20)
prob_mas_20_fallidas <- 1 - pnbinom(20, size = r_exitos_requeridos, prob = p_exito_prueba)
cat("b) P(más de 20 fallidas):", round(prob_mas_20_fallidas, 4), "\n")

# c) Costo esperado en pruebas fallidas
# E[X] = r*(1-p)/p
fallidas_esperadas <- r_exitos_requeridos * (1 - p_exito_prueba) / p_exito_prueba
costo_esperado_fallidas <- fallidas_esperadas * costo_prueba

cat("c) Costo esperado en pruebas fallidas: $", 
    format(round(costo_esperado_fallidas, 2), big.mark = ","), "\n")

# Costo total esperado (fallidas + exitosas)
pruebas_totales_esperadas <- r_exitos_requeridos / p_exito_prueba
costo_total_esperado <- pruebas_totales_esperadas * costo_prueba
cat("   Costo total esperado: $", 
    format(round(costo_total_esperado, 2), big.mark = ","), "\n")
```

```{r}
# ANÁLISIS ADICIONAL Y GRÁFICO PARA BIOTECNOLOGÍA
library(ggplot2)

# Distribución de probabilidades
x_valores <- 0:50
probabilidades <- dnbinom(x_valores, size = r_exitos_requeridos, prob = p_exito_prueba)
datos_distribucion <- data.frame(
  Fallidas = x_valores,
  Probabilidad = probabilidades,
  Costo = x_valores * costo_prueba
)

# Gráfico de la distribución
ggplot(datos_distribucion, aes(x = Fallidas, y = Probabilidad)) +
  geom_col(fill = "coral", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = fallidas_esperadas, 
             color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = 12, color = "blue", linetype = "dashed", size = 0.8) +
  geom_vline(xintercept = 20, color = "darkgreen", linetype = "dashed", size = 0.8) +
  annotate("text", x = fallidas_esperadas + 8, y = max(probabilidades) * 0.9,
           label = paste("Esperado:", round(fallidas_esperadas, 1)), 
           color = "red") +
  annotate("text", x = 12, y = max(probabilidades) * 0.7,
           label = "12 fallidas", color = "blue") +
  annotate("text", x = 25, y = max(probabilidades) * 0.5,
           label = "20+ fallidas", color = "darkgreen") +
  labs(
    title = "Distribución de Pruebas Fallidas en Desarrollo de Medicamento",
    subtitle = "Binomial Negativa(r=4, p=0.3) - 4 éxitos requeridos",
    x = "Número de Pruebas Fallidas",
    y = "Probabilidad"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, 50, by = 5))
```
:::
