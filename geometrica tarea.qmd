---
title: "Distribución Geométrica"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(kableExtra)
library(gridExtra)
```

La **distribución geométrica** modela el número de ensayos independientes de Bernoulli necesarios antes de obtener el primer éxito. Es fundamental para analizar tiempos de espera y procesos que involucran la búsqueda del primer evento exitoso.

::: {#def-geometrica}
Una variable aleatoria $X$ sigue una distribución geométrica si representa el número de ensayos necesarios antes de obtener el primer éxito en una secuencia de ensayos independientes de Bernoulli. Si la probabilidad de éxito en cada ensayo es $p$, entonces la función de masa de probabilidad (pmf) está dada por:

$$f(x)= p(1-p)^x \quad \text{para } x =0,  1, 2, 3, \ldots$$

Una variable aleatoria $X$ que tiene distribución geométrica será denotada como $X \sim \text{geo}(p)$.
:::

## Características de la Distribución Geométrica

**Parámetros**

-   $p$: probabilidad de éxito en cada ensayo, donde $0 < p \leq 1$

**Función de Distribución**

\begin{equation}
F(x) = \sum_{u\leq x} f(u) = \begin{cases}
0 & \text{si } x < 0 \\
1-(1-p)^{k+1} & \text{si } k \leq x \leq k+1; \quad k=0,1, \dots 
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media): $$E(X) = \frac{1-p}{p}$$

Varianza: $$\text{Var}(X) = \frac{1-p}{p^2}$$

Desviación Estándar: $$\sigma = \sqrt{\frac{1-p}{p^2}} = \frac{\sqrt{1-p}}{p}$$

## Ejemplo Básico

::: {#exm-geom_1}
Lanzamiento de monedas - Búsqueda de la primera cara. Consideramos una moneda justa ($p=0.5$), y queremos modelar el número de lanzamientos hasta antes de obtener la primera cara.

```{r}
#| label: moneda-geometrica
# Parámetro
p_cara <- 0.5

# Calcular probabilidades para los primeros 11 ensayos
k_moneda <- 0:10
# Prefijo d (density) sufijo es el de la va
prob_geometrica <- dgeom(k_moneda , p_cara)  

# Crear tabla
geometrica_moneda <- data.frame(
  Ensayo = k_moneda,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = pgeom(k_moneda, p_cara)
)

kable(geometrica_moneda, 
      caption = "Distribución Geométrica - Primera cara (p = 0.5)",
      digits = 4,
      col.names = c("Ensayo", "P(X = x)", "P(X ≤ x)")) %>%
  kable_styling(bootstrap_options = "striped")

# Parámetros estadísticos
media_moneda <- (1-p_cara) / p_cara
varianza_moneda <- (1 - p_cara) / (p_cara^2)
desv_std_moneda <- sqrt(varianza_moneda)


cat("Media (ensayos esperados):", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", round(desv_std_moneda, 4), "\n")

```

**Visualización**

```{r}
#| label: grafico-geometrica-basico
#| fig-cap: "Distribución Geométrica - Primera cara en lanzamiento de moneda"
ggplot(geometrica_moneda, aes(x = Ensayo, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = media_moneda, color = "red", linetype = "dashed", linewidth = 1) +
  annotate("text", x = media_moneda + 1.5, y = max(prob_geometrica) * 0.8, 
           label = paste("E[X] =", media_moneda), color = "red") +
  scale_x_continuous(breaks = k_moneda) +
  labs(title = paste("Distribución Geométrica(", p_cara, ")"),
       subtitle = "Número de lanzamientos antes de obtener la primera cara",
       x = "Número de Ensayos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Comparación: Efecto del parámetro

A continuación exploramos cómo varía la distribución geométrica al cambiar el parámetro $p$.

```{r}
#| label: diferentes-p
# Diferentes probabilidades de éxito
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
k_max <- 15

# Crear data frame para comparación
geometrica_comp <- data.frame()
for(p in p_values) {
  k_vals <- 0:k_max
  probs <- dgeom(k_vals, p)  
  
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_vals,
    probabilidad = probs,
    media = (1-p)/p,
    varianza = (1-p)/(p^2)
  )
  geometrica_comp <- rbind(geometrica_comp, temp_data)
}

# Tabla de parámetros
parametros_comp <- data.frame(
  p = p_values,
  Media = (1-p_values)/p_values,
  Varianza = (1-p_values)/(p_values^2),
  Desv_Std = sqrt((1-p_values)/(p_values^2))
)

kable(parametros_comp, 
      caption = "Parámetros de la distribución geométrica para diferentes valores de p",
      digits = 4,
      col.names = c("p", "Media", "Varianza", "Desv. Std")) |> 
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]

ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
  geom_line(linewidth = 1, alpha = 0.8) +
  geom_point(size = 2) +
  facet_wrap(~p_label, scales = "free") +
  labs(title = "Distribución Geométrica para diferentes valores de p",
       x = "Número de Ensayos",
       y = "Probabilidad",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "none")
```

## Propiedades Importantes

### Propiedad de Pérdida de Memoria

Sea $X\sim geo(p)$ Entonces para cualesquiera enteros $s, t \geq 0$ se cumple la propiedad de pérdida de memoria:

$$P(X \geq s + t | X \geq s) = P(X \geq t)$$

**Verificación Numérica**

Consideremos una variable aleatoria geométrica con $p=0.3$, y verifiquemos la propiedad para $s=5$ y $t=3$.

```{r}
#| label: falta-memoria
# Demostración de la propiedad de falta de memoria
p_mem <- 0.3
s <- 5
t <- 3

# P(X >= s + t)
prob_s_t <- 1 - pgeom(s + t-1, p_mem)  

# P(X >= s) 
prob_s <- 1- pgeom(s-1, p_mem)

# P(X >= t) 
prob_t <- 1- pgeom(t-1, p_mem)

# P(X >= s + t | X >= s) = P(X >= s + t) / P(X >= s)
prob_condicional <- prob_s_t / prob_s

cat("Demostración de la Propiedad de Falta de Memoria:\n")
cat("Parámetros: p =", p_mem, ", s =", s, ", t =", t, "\n\n")
cat("P(X  ≥", s+t, ") =", round(prob_s_t, 6), "\n")
cat("P(X  ≥", s, ") =", round(prob_s, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("P(X  ≥", s+t, "| X  ≥", s, ") =", round(prob_condicional, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("¿Son iguales?", abs(prob_condicional - prob_t) < 1e-10, "\n")
```

### Función de Supervivencia

La función de supervivencia $S(k)$ representa la probabilidad de que el número de fracasos antes de obtener el primer éxito sea mayor que $k$:

$$S(k) = P(X > k) = (1-p)^{(k+1)}$$

**Visualización de la Función de Supervivencia**

```{r}
#| label: funcion-supervivencia
#| fig-cap: "Función de Supervivencia de la distribución geométrica"
# Diferentes valores de p
p_surv <- c(0.2, 0.4, 0.6, 0.8)
k_surv <- 0:15

# Crear data frame
supervivencia_data <- data.frame()
for(p in p_surv) {
  surv_vals <- (1 - p)^(k_surv+1)
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_surv,
    supervivencia = surv_vals
  )
  supervivencia_data <- rbind(supervivencia_data, temp_data)
}

ggplot(supervivencia_data, aes(x = k, y = supervivencia, color = p_label)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(title = "Función de Supervivencia: P(X > k)",
       x = "k (número de ensayos antes del primer éxito)",
       y = "Probabilidad de Supervivencia",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```

## Ejemplos Aplicados

::: {#exm-geom_calidad}
**Control de Calidad Industrial**

Una máquina produce piezas defectuosas con probabilidad 0.05. ¿Cuántas piezas debemos inspeccionar antes encontrar la primera defectuosa?

```{r}
#| label: control-calidad-geometrica
# Parámetros
p_defecto_geom <- 0.05

# Parámetros estadísticos
media_defecto <- (1-p_defecto_geom) / p_defecto_geom
varianza_defecto <- (1 - p_defecto_geom) / (p_defecto_geom^2)
desv_std_defecto <- sqrt(varianza_defecto)

cat("Control de Calidad - Primera pieza defectuosa:\n")
cat("Probabilidad de defecto por pieza:", p_defecto_geom, "\n")
cat("Número esperado de inspecciones:", media_defecto, "\n")
cat("Desviación estándar:", round(desv_std_defecto, 2), "\n\n")

# Probabilidades específicas
k_calidad <- 0:50
prob_calidad <- dgeom(k_calidad, p_defecto_geom)

# Preguntas de interés
prob_primera_10 <- sum(prob_calidad[1:10])
prob_mas_20 <- 1 - sum(prob_calidad[1:20])
prob_entre_10_30 <- sum(prob_calidad[10:30])

cat("Probabilidades de interés:\n")
cat("P(primera defectuosa en ≤ 10 inspecciones):", round(prob_primera_10, 4), "\n")
cat("P(primera defectuosa en > 20 inspecciones):", round(prob_mas_20, 4), "\n")
cat("P(primera defectuosa entre 10 y 30 inspecciones):", round(prob_entre_10_30, 4), "\n")



# Visualización
calidad_data <- data.frame(
  k = k_calidad[1:40],
  probabilidad = prob_calidad[1:40]
)

ggplot(calidad_data, aes(x = k, y = probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_defecto, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_defecto + 5, y = max(prob_calidad) * 0.8, 
           label = paste("E(X) =", media_defecto), color = "red") +
  labs(title = "Control de Calidad: Primera Pieza Defectuosa",
       subtitle = paste("Geométrica(", p_defecto_geom, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Simulación: Validación de propiedades teóricas

```{r}
#| label: simulacion-geometrica
set.seed(123)
p_sim <- 0.25
n_sim <- 10000

# Generar datos geométricos 
datos_geom <- rgeom(n_sim, p_sim) 

# Estadísticas observadas
media_obs <- mean(datos_geom)
var_obs <- var(datos_geom)
desv_obs <- sd(datos_geom)

# Valores teóricos
media_teo <- (1-p_sim) / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", var_teo, "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n")

# Comparar distribuciones
freq_obs <- table(datos_geom[datos_geom <= 20]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp, p_sim)

comparacion_sim <- data.frame(
  k = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

kable(head(comparacion_sim, 12), 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("k", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```

## Ejercicios Propuestos

::: {#exr-geom_1}
Se lanza una moneda hasta obtener la primera cara.

```{r}

p_cara <- 0.5  # Probabilidad de cara en cada lanzamiento

# a) Probabilidad de necesitar exactamente 5 lanzamientos
# Nota: En R, dgeom(x, p) da P(X = x) donde X = número de fracasos antes del primer éxito
# Para "necesitar exactamente 5 lanzamientos" = 4 fracasos + 1 éxito
prob_exacta_5 <- dgeom(4, prob = p_cara)
cat("a) Probabilidad de necesitar exactamente 5 lanzamientos:", round(prob_exacta_5, 4), "\n")

# Verificación: (1-p)^4 * p
prob_verificacion <- (1 - p_cara)^4 * p_cara
cat("   Verificación manual: (1-p)⁴ * p =", round(prob_verificacion, 4), "\n")

# b) Probabilidad de necesitar más de 3 lanzamientos
# P(X > 3) = P(necesitar 4 o más lanzamientos) = P(primeros 3 son fracasos)
prob_mas_3 <- 1 - pgeom(2, prob = p_cara)  # pgeom da P(X ≤ x)
# Alternativa: (1-p)^3
prob_alternativa <- (1 - p_cara)^3
cat("b) Probabilidad de necesitar más de 3 lanzamientos:", round(prob_mas_3, 4), "\n")
cat("   Verificación: (1-p)³ =", round(prob_alternativa, 4), "\n")

# c) Media y varianza del número de lanzamientos
# Media = E[X] = 1/p (donde X = número de lanzamientos hasta primer éxito)
media_lanzamientos <- 1 / p_cara
# Varianza = Var[X] = (1-p)/p²
varianza_lanzamientos <- (1 - p_cara) / (p_cara^2)
desviacion_lanzamientos <- sqrt(varianza_lanzamientos)

cat("c) Parámetros estadísticos:\n")
cat("   Media (número esperado de lanzamientos):", media_lanzamientos, "\n")
cat("   Varianza:", varianza_lanzamientos, "\n")
cat("   Desviación estándar:", round(desviacion_lanzamientos, 4), "\n")
```

```{r}
# SIMULACIÓN PARA VERIFICACIÓN
set.seed(123)
n_simulaciones <- 10000

# Simular lanzamientos hasta obtener primera cara
simular_lanzamientos <- function() {
  lanzamientos <- 0
  while (TRUE) {
    lanzamientos <- lanzamientos + 1
    resultado <- sample(c("Cara", "Cruz"), size = 1, prob = c(p_cara, 1 - p_cara))
    if (resultado == "Cara") {
      return(lanzamientos)
    }
  }
}

# Ejecutar simulaciones
resultados <- replicate(n_simulaciones, simular_lanzamientos())

cat("\nVERIFICACIÓN MEDIANTE SIMULACIÓN (10,000 repeticiones):\n")
cat("Proporción con exactamente 5 lanzamientos:", 
    round(mean(resultados == 5), 4), "\n")
cat("Proporción con más de 3 lanzamientos:", 
    round(mean(resultados > 3), 4), "\n")
cat("Media simulada de lanzamientos:", round(mean(resultados), 4), "\n")
cat("Varianza simulada de lanzamientos:", round(var(resultados), 4), "\n")
```

```{r}
# GRÁFICO DE LA DISTRIBUCIÓN GEOMÉTRICA
library(ggplot2)

# Generar datos para la distribución geométrica
x_valores <- 1:10  # Número de lanzamientos necesarios
probabilidades <- dgeom(x_valores - 1, prob = p_cara)  # dgeom usa número de fracasos

datos_grafico <- data.frame(
  Lanzamientos = x_valores,
  Probabilidad = probabilidades
)

# Gráfico de barras
ggplot(datos_grafico, aes(x = factor(Lanzamientos), y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), 
            vjust = -0.3, size = 3) +
  geom_vline(xintercept = media_lanzamientos - 0.5, 
             color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_lanzamientos + 0.5, y = max(probabilidades) * 0.9,
           label = paste("Media =", media_lanzamientos), 
           color = "red", hjust = 0) +
  labs(
    title = "Distribución Geométrica - Lanzamientos hasta primera Cara",
    subtitle = paste("p =", p_cara, "| P(X = k) = (1-p)ᵏ⁻¹ × p"),
    x = "Número de Lanzamientos Necesarios",
    y = "Probabilidad"
  ) +
  theme_minimal() +
  scale_y_continuous(limits = c(0, max(probabilidades) * 1.1))
```
:::

::: {#exr-geom_2}
Un jugador de básquetbol tiene 70% de probabilidad de anotar un tiro libre.

```{r}
# EJERCICIO 2: JUGADOR DE BÁSQUETBOL - DISTRIBUCIÓN GEOMÉTRICA

p_anotar <- 0.70  # Probabilidad de anotar un tiro libre

# a) Probabilidad de que anote en el tercer intento por primera vez
# Esto significa: 2 fracasos + 1 éxito en el tercer intento
prob_tercer_intento <- dgeom(2, prob = p_anotar)
cat("a) Probabilidad de anotar por primera vez en el 3er intento:", 
    round(prob_tercer_intento, 4), "\n")

# Verificación manual: (1-p)² * p
prob_verificacion <- (1 - p_anotar)^2 * p_anotar
cat("   Verificación: (1-p)² × p =", round(prob_verificacion, 4), "\n")

# b) Número esperado de intentos para anotar
# Media de la distribución geométrica = 1/p
intentos_esperados <- 1 / p_anotar
cat("b) Número esperado de intentos para anotar:", round(intentos_esperados, 2), "\n")

# Varianza y desviación estándar
varianza_intentos <- (1 - p_anotar) / (p_anotar^2)
desviacion_intentos <- sqrt(varianza_intentos)
cat("   Desviación estándar:", round(desviacion_intentos, 2), "\n")

# c) Probabilidad de necesitar entre 2 y 5 intentos (inclusive)
# P(2 ≤ X ≤ 5) = P(X ≤ 5) - P(X ≤ 1)
# Donde X = número de intentos hasta el primer éxito
prob_entre_2_5 <- pgeom(4, prob = p_anotar) - pgeom(0, prob = p_anotar)
cat("c) P(necesitar entre 2 y 5 intentos):", round(prob_entre_2_5, 4), "\n")

# Verificación manual sumando probabilidades individuales
prob_manual <- sum(dgeom(1:4, prob = p_anotar))  # 1-4 fracasos antes del éxito
cat("   Verificación manual:", round(prob_manual, 4), "\n")
```

```{r}
# SIMULACIÓN PARA VERIFICACIÓN
set.seed(456)
n_simulaciones <- 10000

# Función para simular intentos hasta anotar
simular_intentos <- function() {
  intentos <- 0
  while (TRUE) {
    intentos <- intentos + 1
    # 1 = anota, 0 = falla
    resultado <- sample(c(1, 0), size = 1, prob = c(p_anotar, 1 - p_anotar))
    if (resultado == 1) {
      return(intentos)
    }
  }
}

# Ejecutar simulaciones
resultados_sim <- replicate(n_simulaciones, simular_intentos())

cat("\nVERIFICACIÓN MEDIANTE SIMULACIÓN (10,000 repeticiones):\n")
cat("Proporción que anota en 3er intento:", 
    round(mean(resultados_sim == 3), 4), "\n")
cat("Proporción que necesita entre 2-5 intentos:", 
    round(mean(resultados_sim >= 2 & resultados_sim <= 5), 4), "\n")
cat("Media de intentos simulada:", round(mean(resultados_sim), 4), "\n")
cat("Desviación estándar simulada:", round(sd(resultados_sim), 4), "\n")
```

```{r}
# GRÁFICO DE LA DISTRIBUCIÓN
library(ggplot2)

# Generar datos para la distribución geométrica
x_valores <- 1:8  # Número de intentos necesarios
probabilidades <- dgeom(x_valores - 1, prob = p_anotar)

datos_grafico <- data.frame(
  Intentos = x_valores,
  Probabilidad = probabilidades
)

# Resaltar las probabilidades relevantes para el ejercicio
datos_grafico$Relevante <- ifelse(datos_grafico$Intentos == 3, "Tercer intento",
                                 ifelse(datos_grafico$Intentos >= 2 & 
                                        datos_grafico$Intentos <= 5, "Entre 2-5", "Otro"))

ggplot(datos_grafico, aes(x = factor(Intentos), y = Probabilidad, fill = Relevante)) +
  geom_col(alpha = 0.8, width = 0.7) +
  geom_text(aes(label = round(Probabilidad, 3)), 
            vjust = -0.3, size = 3) +
  geom_vline(xintercept = intentos_esperados - 0.5, 
             color = "red", linetype = "dashed", size = 1) +
  scale_fill_manual(values = c("Tercer intento" = "coral", 
                              "Entre 2-5" = "lightblue", 
                              "Otro" = "steelblue")) +
  labs(
    title = "Distribución Geométrica - Intentos hasta Anotar",
    subtitle = paste("Jugador con", p_anotar*100, "% de efectividad en tiros libres"),
    x = "Número de Intentos hasta Primera Anotación",
    y = "Probabilidad",
    fill = "Eventos relevantes"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  scale_y_continuous(limits = c(0, max(probabilidades) * 1.1))
```


:::

::: {#exr-geom_3}
Una máquina tiene probabilidad 0.02 de producir una pieza defectuosa.

```{r}


p_defectuosa <- 0.02  # Probabilidad de pieza defectuosa

# a) Número esperado de inspecciones hasta encontrar primera defectuosa
# Media de la distribución geométrica = 1/p
inspecciones_esperadas <- 1 / p_defectuosa
cat("a) Número esperado de inspecciones:", inspecciones_esperadas, "\n")

# Varianza y desviación estándar
varianza_inspecciones <- (1 - p_defectuosa) / (p_defectuosa^2)
desviacion_inspecciones <- sqrt(varianza_inspecciones)
cat("   Varianza:", round(varianza_inspecciones, 2), "\n")
cat("   Desviación estándar:", round(desviacion_inspecciones, 2), "\n")

# b) Probabilidad de que la primera defectuosa aparezca después de la pieza 100
# P(X > 100) = P(primeras 100 piezas son buenas) = (1-p)^100
prob_despues_100 <- (1 - p_defectuosa)^100
cat("b) P(primera defectuosa después de pieza 100):", round(prob_despues_100, 6), "\n")

# Verificación usando la función de distribución acumulada
prob_verificacion <- 1 - pgeom(99, prob = p_defectuosa)
cat("   Verificación con pgeom:", round(prob_verificacion, 6), "\n")
```



```{r}
# GRÁFICO DE LA DISTRIBUCIÓN Y PROBABILIDADES
library(ggplot2)

# Generar datos para la distribución geométrica
x_valores <- 1:200
probabilidades <- dgeom(x_valores - 1, prob = p_defectuosa)

datos_grafico <- data.frame(
  Inspecciones = x_valores,
  Probabilidad = probabilidades
)

# Resaltar puntos importantes
punto_esperado <- inspecciones_esperadas
punto_100 <- 100

ggplot(datos_grafico, aes(x = Inspecciones, y = Probabilidad)) +
  geom_line(color = "steelblue", alpha = 0.7) +
  geom_point(data = datos_grafico[datos_grafico$Inspecciones <= 50, ], 
             aes(x = Inspecciones, y = Probabilidad), 
             color = "steelblue", size = 1) +
  geom_vline(xintercept = punto_esperado, 
             color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = punto_100, 
             color = "darkgreen", linetype = "dashed", size = 1) +
  annotate("text", x = punto_esperado + 15, y = max(probabilidades) * 0.8,
           label = paste("Media =", punto_esperado), 
           color = "red", hjust = 0) +
  annotate("text", x = punto_100 + 15, y = max(probabilidades) * 0.6,
           label = paste("P(X > 100) =", round(prob_despues_100, 6)), 
           color = "darkgreen", hjust = 0) +
  labs(
    title = "Distribución Geométrica - Inspecciones hasta Primera Pieza Defectuosa",
    subtitle = paste("Probabilidad de defectuosa =", p_defectuosa),
    x = "Número de Inspecciones hasta Primera Defectuosa",
    y = "Probabilidad"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0, 200, by = 25)) +
  scale_y_continuous(labels = scales::scientific)
```
:::


